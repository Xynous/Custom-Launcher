using System;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.IO;
using System.Xml.Linq;
using System.Net;
using System.Reflection;
using Custom_Launcher;

namespace Custom_Launcher
{
    public partial class MainForm : Form
    {
        #region Global Objects/Variables
        //set  XML DIR
        private static string XMLFileDIR = @"C:\ProgramData\CustomLauncher\CustomConfig.xml";
        private static string XMLDIR = XMLFileDIR.Replace(@"\CustomConfig.xml", "");

        // Creates 4 objects from the WebClient class
        private WebClient webClientExile = new WebClient();
        private WebClient webClientA3_Epoch = new WebClient();
        private WebClient webClientDayZ_Overwatch = new WebClient();
        private WebClient webClientDayZ_Epoch = new WebClient();

        #endregion

        #region MainForm
        public MainForm()
        {
            InitializeComponent();
            loadMLConfig();

        }
        
        private void loadMLConfig()
        {


            // Check if the config exists
            // Set Public Variables 
            string updatearma2dir = "";
            string updatearma2oadir = "";
            string updatearma3dir = "";

            // Goto label
            Recheck:

            if (!File.Exists(XMLFileDIR))
            {
                //Creata a New XDocument
                string currentVer = Assembly.GetEntryAssembly().GetName().Version.ToString();
                XDocument MLConfig = new XDocument(
                    new XDeclaration("1.0", "utf8", "yes"),
                    new XComment("XML Config auto generated by Custom Launcher"),
                    new XComment("Authors: Evention, VJ"),
                    new XElement("CustomLauncher",
                        new XElement("XMLVersion", currentVer),
                        new XElement("Arma2OA",
                            new XElement("A2OADIRPATH", updatearma2oadir),
                            new XElement("A2DIRPATH", updatearma2dir),
                            new XElement("OE", "False"),
                            new XElement("O", "False"),
                            new XElement("E", "False"),
                            new XElement("log", "False"),
                            new XElement("splash", "False"),
                            new XElement("intro", "False"),
                            new XElement("world", "False")

                        ),
                        new XElement("Arma3",
                            new XElement("Arma3DIR", updatearma3dir),
                            new XElement("Epoch", "False"),
                            new XElement("Exile", "False"),
                            new XElement("log", "False"),
                            new XElement("splash", "False"),
                            new XElement("intro", "False"),
                            new XElement("world", "False")
                        )
                        
                    )
                    );
                //Creata the Directory and Config
                Directory.CreateDirectory(XMLDIR);
                MLConfig.Save(XMLFileDIR);
                goto Recheck;

            }
            else
            {
                //Load the config
                XDocument _config = XDocument.Load(XMLFileDIR);
                string currentVer = Assembly.GetEntryAssembly().GetName().Version.ToString();
                string xmlVer = _config.Root.Element("XMLVersion").Value.ToString().Replace("<XMLVersion>", "").Replace("</XMLVersion", "");
                updatearma2dir = _config.Root.Element("Arma2OA").Element("A2DIRPATH").Value.ToString().Replace("<A2OADIRPATH>", "").Replace("</A2OADIRPATH>", "");
                updatearma2oadir = _config.Root.Element("Arma2OA").Element("A2OADIRPATH").Value.ToString().Replace("<A2DIRPATH>", "").Replace("</A2DIRPATH>", "");
                updatearma3dir = _config.Root.Element("Arma3").Element("Arma3DIR").Value.ToString().Replace("<Arma3DIR>", "").Replace("</Arma3DIR>", "");

                if (xmlVer == currentVer)
                {
                    //set Arma 2 OA Dir
                    A2Path_TextBox.Text = updatearma2oadir;

                    //set Arma 2 OA Dir
                    Arma2DirPath.Text = updatearma2dir;

                    //set Arma 3 Dir
                    A3Path_TextBox.Text = updatearma3dir;

                    //set Checkboxes
                    no_Intro_A3_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("intro").Value);
                    no_Log_A3_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("log").Value);
                    no_Splash_A3_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("splash").Value);
                    no_World_A3_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("world").Value);
                    no_Intro_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("intro").Value);
                    no_Log_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("log").Value);
                    no_Splash_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("splash").Value);
                    no_World_cb.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("world").Value);
                    DayZEpoch_ChkBox.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("E").Value);
                    DayZOverwatch_ChkBox.Checked = Convert.ToBoolean(_config.Root.Element("Arma2OA").Element("O").Value);
                    A3EpochMod_ChkBox.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("Epoch").Value);
                    ExileMod_ChkBox.Checked = Convert.ToBoolean(_config.Root.Element("Arma3").Element("Exile").Value);
                }
                else
                {
                    /*
                        If the XML Version is not the same as the program Version
                        Delete, after loop through and Recreate the XML and reset
                        the settings.
                    */
                    System.IO.File.Delete(XMLFileDIR);
                    goto Recheck;
                }

            }


        }
        #endregion

        #region Arma 3 Object Section

        private void Start_Arma_3_Btn_Click(object sender, EventArgs e)
        {

            //Creat a new Process
            Process LaunchA3 = new Process();
            //set the Process .exe
            LaunchA3.StartInfo.FileName = A3Path_TextBox.Text.ToString();

            //set the Process Arguments baced on what checkbox is checked
            StringBuilder sb = new StringBuilder();
            sb.Clear();
            if (no_Intro_A3_cb.Checked) { sb.Append(@" -noIntro"); saveCBValues(); }
            if (no_Log_A3_cb.Checked) { sb.Append(@" -noLogs"); saveCBValues(); }
            if (no_Splash_A3_cb.Checked) { sb.Append(@" -nosplash"); saveCBValues(); }
            if (no_World_A3_cb.Checked) { sb.Append(@" -world=empty"); saveCBValues(); }
            string Pram3 = sb.ToString();

            if (A3EpochMod_ChkBox.Checked)
            {
                string Pram1 = @"0 1 ""-mod=";
                string Pram2 = @"@Epoch;""";
                LaunchA3.StartInfo.Arguments = Pram1 + Pram2 + Pram3;
            }
            else if (ExileMod_ChkBox.Checked)
            {
                string Pram1 = @"0 1 ""-mod=";
                string Pram2 = @"@Exile;""";
                LaunchA3.StartInfo.Arguments = Pram1 + Pram2 + Pram3;
            }
            else
            {
                string Pram1 = @"0 1 ""-mod=";
                string Pram2 = @"""";
                LaunchA3.StartInfo.Arguments = Pram1 + Pram2 + Pram3;
            }

            //This hides the battleye cmd window when loading
            LaunchA3.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            //Launch / Start Arma 3
            LaunchA3.Start();

        }
        
        private void ExileMod_ChkBox_CheckedChanged(object sender, EventArgs e)
        {
            if (ExileMod_ChkBox.Checked)
            {
                A3EpochMod_ChkBox.Enabled = false;
            }
            else
            {
                A3EpochMod_ChkBox.Enabled = true;
            }
            saveCBValues();
        }

        private void A3EpochMod_ChkBox_CheckedChanged(object sender, EventArgs e)
        {
            if (A3EpochMod_ChkBox.Checked)
            {
                ExileMod_ChkBox.Enabled = false;
            }
            else
            {
                ExileMod_ChkBox.Enabled = true;
            }
            saveCBValues();
        }

        private void Folder_Browser_Button_Click(object sender, EventArgs e)
        {
            // A button (Object) which when selected the file browser dialog will pop up asking the user to select a file. 
            
            // Creates a new object (Instance) of the OpenFileDialog class
            OpenFileDialog File_Browser_Instance1 = new OpenFileDialog();

            // Opens the file dialog when the button is pressed.
            File_Browser_Instance1.ShowDialog();

            // Gets and sets the path the user selects and then stores it within the path variable which is a string.
            var path = File_Browser_Instance1.FileName;

            // Assings the string stored in variable path to be passed into the A3Path_TextBox object.
            A3Path_TextBox.Text = path;
            
        }

        private void A3Path_TextBox_TextChanged(object sender, EventArgs e)
        {
            //Save Dir to the config
            string _DIR = A3Path_TextBox.Text.ToString();

            XDocument _config = XDocument.Load(XMLFileDIR);
            _config.Root.Element("Arma3").Element("Arma3DIR").Value = _DIR;
            _config.Save(XMLFileDIR);
        }

        #endregion

        #region Arma 2 Object section

        /////////////////////////// ARMA 2 OBJECT SECTION //////////////////////
        private void Start_Arma2_Btn_Click(object sender, EventArgs e)
        {
            //Creat a new Process
            Process LaunchA2OA = new Process();
            //set the Process .exe
            LaunchA2OA.StartInfo.FileName = A2Path_TextBox.Text.ToString();

            //set the Process Arguments baced on what checkbox is checked

            StringBuilder sb = new StringBuilder();
            sb.Clear();
            if (no_Intro_cb.Checked) { sb.Append(@" -noIntro"); saveCBValues(); }
            if (no_Log_cb.Checked) { sb.Append(@" -noLogs"); saveCBValues(); }
            if (no_Splash_cb.Checked) { sb.Append(@" -nosplash"); saveCBValues(); }
            if (no_World_cb.Checked) { sb.Append(@" -world=empty"); saveCBValues(); }
        
            string Pram3 = sb.ToString();

            if (DayZOverwatch_ChkBox.Checked && DayZEpoch_ChkBox.Checked )
            {
                string _A2DIR = Arma2DirPath.Text;
                string Pram1 = @"0 0 ""-mod=";
                string Pram2 = @";expansion;@DayzOverwatch;@DayZ_Epoch;""";
                LaunchA2OA.StartInfo.Arguments = Pram1 + _A2DIR + Pram2 + Pram3;
            }
            else if (DayZOverwatch_ChkBox.Checked)
            {
                string _A2DIR = Arma2DirPath.Text;
                string Pram1 = @"0 0 ""-mod=";
                string Pram2 = @";expansion;@DayzOverwatch;""";
                LaunchA2OA.StartInfo.Arguments = Pram1 + _A2DIR + Pram2 + Pram3;
            }
            else if (DayZEpoch_ChkBox.Checked)
            {
                string _A2DIR = Arma2DirPath.Text;
                string Pram1 = @"0 0 ""-mod=";
                string Pram2 = @";expansion;@DayZ_Epoch;""";
                LaunchA2OA.StartInfo.Arguments = Pram1 + _A2DIR + Pram2 + Pram3;
            }
            else
            {
                string _A2DIR = Arma2DirPath.Text;
                string Pram1 = @"0 0 ""-mod=";
                string Pram2 = @";expansion;""";
                LaunchA2OA.StartInfo.Arguments = Pram1 + _A2DIR + Pram2 + Pram3;
            }

            //this hides the battleye cmd window when loading
            LaunchA2OA.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            //Launch / Start Arma 2
            LaunchA2OA.Start();

        }

        private void DayZOverwatch_ChkBox_CheckedChanged(object sender, EventArgs e)
        {
                        
        }

        private void DayZEpoch_ChkBox_CheckedChanged(object sender, EventArgs e)
        {
             
            saveCBValues();
        }

        private void DayZOverwatch_DayZEpoch_ChkBox_CheckedChanged(object sender, EventArgs e)
        {
        
            saveCBValues();
        }

        private void A2Path_TextBox_TextChanged(object sender, EventArgs e)
        {
            //Save Dir to the config
            string _DIR = A2Path_TextBox.Text.ToString();
            string _A2DIR = A2Path_TextBox.Text.Replace(@"\Arma 2 Operation Arrowhead\ArmA2OA_BE.exe", @"\Arma 2");

            XDocument _config = XDocument.Load(XMLFileDIR);
            _config.Root.Element("Arma2OA").Element("A2OADIRPATH").Value = _DIR;
            _config.Root.Element("Arma2OA").Element("A2DIRPATH").Value = _A2DIR;
            _config.Save(XMLFileDIR);
        }

        private void A2_Folder_Browser_Button_Click(object sender, EventArgs e)
        {
            // A button (Object) which when selected the file browser dialog will pop up asking the user to select a file. 

            // Creates a new object (Instance) of the OpenFileDialog class
            OpenFileDialog File_Browser_Instance2 = new OpenFileDialog();

            // Opens the file dialog when the button is pressed.
            File_Browser_Instance2.ShowDialog();

            // Gets and sets the path the user selects and then stores it within the path variable which is a string.
            var path = File_Browser_Instance2.FileName;

            // Assings the string stored in variable path to be passed into the A2Path_TextBox object.
            A2Path_TextBox.Text = path;
        }

        #endregion

        #region Mod Download Section

        ////////////// DOWNLOAD MOD OBJECT SECTION ///////////////////////////
        private void ModExile_Download_ProgressBar_Click(object sender, EventArgs e)
        {
            // progress bar object within the download mod tab section
        }

        private void ModA3Epoch_Download_ProgressBar_Click(object sender, EventArgs e)
        {
            // progress bar object within the download mod tab section
        }

        private void ModDayZOverwatch_Download_ProgressBar_Click(object sender, EventArgs e)
        {
            // progress bar object within the download mod tab section
        }

        private void ModDayZEpoch_Download_ProgressBar_Click(object sender, EventArgs e)
        {
            // progress bar object within the download mod tab section
        }

       

        private void Exile_Download_Click(object sender, EventArgs e)
        {
            // Creates object of the SaveFileDialog Class
            var ExileDialog = new SaveFileDialog();

            // Sets the default file extension of zip when the user downloads the mod files.
            ExileDialog.Filter = "Zip Files|*.zip";

            // Opens a dialog box when the download button is selected.
            ExileDialog.ShowDialog();

            // Progress bar eventhandler
            webClientExile.DownloadProgressChanged += (s, t) =>
            {
                ModExile_Download_ProgressBar.Visible = true;
                ModExile_Download_ProgressBar.Value = t.ProgressPercentage;
               
            };

            // Progress bar event handlers.
            webClientExile.DownloadFileCompleted += (s, t) =>
            {
                ModExile_Download_ProgressBar.Value = 0;
                ModExile_Download_ProgressBar.Visible = false;
            };

            // Performs the download of the file from the URL (Uniform resource locator)
            webClientExile.DownloadFileAsync(new Uri("http://Source/To/Path/Here/file.zip"), ExileDialog.FileName);
        }

        private void A3_Epoch_Download_Click(object sender, EventArgs e)
        {
            // Creates object of the SaveFileDialog Class
            var A3Epoch = new SaveFileDialog();

            // Sets the default file extension of zip when the user downloads the mod files.
            A3Epoch.Filter = "Zip Files|*.zip";

            // Opens dialog when the user selects the download button.
            A3Epoch.ShowDialog();

            // Progress bar event handlers.
            webClientA3_Epoch.DownloadProgressChanged += (s, t) =>
            {
                ModA3Epoch_Download_ProgressBar.Visible = true;
                ModA3Epoch_Download_ProgressBar.Value = t.ProgressPercentage;
            };

            // Progress bar event handlers.
            webClientA3_Epoch.DownloadFileCompleted += (s, t) =>
            {
                ModA3Epoch_Download_ProgressBar.Value = 0;
                ModA3Epoch_Download_ProgressBar.Visible = false;
               
            };

            // Performs the download of the file from the URL (Uniform resource locator), the A3Epoch sets the file name (String)
            webClientA3_Epoch.DownloadFileAsync(new Uri("http://Source/To/Path/Here/file.zip"), A3Epoch.FileName);
        }

        private void DayZOverwatch_Download_Click(object sender, EventArgs e)
        {
            // Creates object of the SaveFileDialog Class
            var DayZOverwatch = new SaveFileDialog();

            // Sets the default file extension of zip when the user downloads the mod files.
            DayZOverwatch.Filter = "Zip Files|*.zip";

            // Opens dialog when the user selects the download button.
            DayZOverwatch.ShowDialog();

            // Progress bar event handlers.
            webClientDayZ_Overwatch.DownloadProgressChanged += (s, t) =>
            {
                ModDayZOverwatch_Download_ProgressBar.Visible = true;
                ModDayZOverwatch_Download_ProgressBar.Value = t.ProgressPercentage;
            };

            // Progress bar event handlers.
            webClientDayZ_Overwatch.DownloadFileCompleted += (s, t) =>
            {
                ModDayZOverwatch_Download_ProgressBar.Value = 0;
                ModDayZOverwatch_Download_ProgressBar.Visible = false;
                
            };

            // Performs the download of the file from the URL (Uniform resource locator), the DayZOverwatch sets the file name (String)
            webClientDayZ_Overwatch.DownloadFileAsync(new Uri("http://Source/To/Path/Here/file.zip"), DayZOverwatch.FileName);
        }

        private void DayZEpoch_Download_Click(object sender, EventArgs e)
        {
            // Creates object of the SaveFileDialog Class
            var DayZEpoch = new SaveFileDialog();

            // Sets the default file extension of zip when the user downloads the mod files.
            DayZEpoch.Filter = "Zip Files|*.zip";

            // Opens dialog when the user selects the download button.
            DayZEpoch.ShowDialog();

            // Progress bar event handlers.
            webClientDayZ_Epoch.DownloadProgressChanged += (s, t) =>
            {
                ModDayZEpoch_Download_ProgressBar.Visible = true;
                ModDayZEpoch_Download_ProgressBar.Value = t.ProgressPercentage;
            };

            // Progress bar event handlers.
            webClientDayZ_Epoch.DownloadFileCompleted += (s, t) =>
            {
                ModDayZEpoch_Download_ProgressBar.Value = 0;
                ModDayZEpoch_Download_ProgressBar.Visible = false;

            };

            // Performs the download of the file from the URL (Uniform resource locator), the DayZEpoch sets the file name (String)
            webClientDayZ_Epoch.DownloadFileAsync(new Uri("http://Source/To/Path/Here/file.zip"), DayZEpoch.FileName);
        }

        private void Exile_Cancel_Download_Btn0_Click(object sender, EventArgs e)
        {
            // Cancels the download when the button is pressed, cancels the downloadfileAsync
            webClientExile.CancelAsync();
            MessageBox.Show("Download Cancelled", "Notification");
            ModExile_Download_ProgressBar.Value = 0;
        }

        private void A3Epoch_Cancel_Download_Btn1_Click(object sender, EventArgs e)
        {
            // Cancels the download when the button is pressed, cancels the downloadfileAsync
            webClientA3_Epoch.CancelAsync();
            MessageBox.Show("Download Cancelled", "Notification");
            ModExile_Download_ProgressBar.Value = 0;
        }

        private void DayZOverwatch_Cancel_Download_Click(object sender, EventArgs e)
        {
            // Cancels the download when the button is pressed, cancels the downloadfileAsync
            webClientDayZ_Overwatch.CancelAsync();
            MessageBox.Show("Download Cancelled", "Notification");
            ModExile_Download_ProgressBar.Value = 0;
        }

        private void DayZEpoch_Cancel_Download_Click(object sender, EventArgs e)
        {
            // Cancels the download when the button is pressed, cancels the downloadfileAsync
            webClientDayZ_Epoch.CancelAsync();
            MessageBox.Show("Download Cancelled", "Notification");
            ModExile_Download_ProgressBar.Value = 0;
        }

        private void saveCBValues()
        {

            XDocument _config = XDocument.Load(XMLFileDIR);
            
            _config.Root.Element("Arma3").Element("intro").Value = no_Intro_A3_cb.Checked.ToString();
            _config.Root.Element("Arma3").Element("log").Value = no_Log_A3_cb.Checked.ToString();
            _config.Root.Element("Arma3").Element("splash").Value = no_Splash_A3_cb.Checked.ToString();
            _config.Root.Element("Arma3").Element("world").Value = no_World_A3_cb.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("intro").Value = no_Intro_cb.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("log").Value = no_Log_cb.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("splash").Value = no_Splash_cb.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("world").Value = no_World_cb.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("E").Value = DayZEpoch_ChkBox.Checked.ToString();
            _config.Root.Element("Arma2OA").Element("O").Value = DayZOverwatch_ChkBox.Checked.ToString();
            _config.Root.Element("Arma3").Element("Epoch").Value = A3EpochMod_ChkBox.Checked.ToString();
            _config.Root.Element("Arma3").Element("Exile").Value = ExileMod_ChkBox.Checked.ToString();

            _config.Save(XMLFileDIR);
        }


        #endregion

        #region Form Events

        private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            // Gets the specfic process name 
            var applicationProcess = Process.GetProcessesByName("Custom Launcher");

            // Performs a for each loop which will loop throughout the list of running processes on client system and when multi launcher process is detected running it will kill the process.
            foreach (var customLauncherprocess in applicationProcess)
            {
                // kills process when multi launcher process is detected running when application gets closed, this will prevent running process in background when closed and higher RAM usage.
                customLauncherprocess.Kill();
            }

        }

        #endregion

        #region Process Killing
        private void Kill_A3P_btn_Click(object sender, EventArgs e)
        {
            // Performs a foreach loop, looking for the specific process by process name
            foreach (var a3process in Process.GetProcessesByName("arma3"))
            {
                // When the process is found running on the local machine, it will kill the process.
                a3process.Kill();
            }
        }

        private void Kill_CL_btn1_Click(object sender, EventArgs e)
        {
            // Performs a foreach loop, looking for the specific process by process name
            foreach (var CLProcess in Process.GetProcessesByName("Custom Launcher"))
            {
                // When the process is found running on the local machine, it will kill the process.
                CLProcess.Kill();
            }
        }

        private void Kill_A2P_btn_Click(object sender, EventArgs e)
        {
            // Performs a foreach loop, looking for the specific process by process name
            foreach (var a2process in Process.GetProcessesByName("ArmA2OA"))
            {
                // When the process is found running on the local machine, it will kill the process.
                a2process.Kill();
            }
        }

        private void Kill_CL_btn2_Click(object sender, EventArgs e)
        {
            // Performs a foreach loop, looking for the specific process by process name
            foreach (var CLProcess in Process.GetProcessesByName("Custom Launcher"))
            {
                // When the process is found running on the local machine, it will kill the process.
                CLProcess.Kill();
            }
        }
    }
}

#endregion